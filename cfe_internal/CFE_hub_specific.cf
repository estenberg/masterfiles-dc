##################################################################
#
# DO NOT EDIT THIS FILE. All policy files prefixed with CFE_ are maintained
# by CFEngine and its original state is required for internal operations of
# CFEngine. If the file has been modified CFEngineâ€™s upgrades may require 
# manual intervention. Contact CFEngine support if additional information 
# and/or recommendation is needed.
#
##################################################################
##################################################################
#
# cfe_internal_hub_vars
#  - define a default location of Mission Portal WebGUI  
#
##################################################################

bundle common cfe_internal_hub_vars
{
 vars:

  linux::
  
   "docroot" string => "/var/cfengine/httpd/htdocs",
            comment => "Root directory of Enterprise Web interface",
             handle => "cfe_internal_hub_vars_docroot";

#  redhat::
#
#   "docroot" string => "/var/www/html",
#            comment => "Root directory of Enterprise Web interface",
#             handle => "cfe_internal_hub_vars_docroot_redhat";
#
#  debian::
#
#   "docroot" string => "/var/www",
#            comment => "Root directory of Enterprise Web interface",
#             handle => "cfe_internal_hub_vars_docroot_debian";
#
#  SuSE::
#
#   "docroot" string => "/srv/www/htdocs",
#            comment => "Root directory of Enterprise Web interface",
#             handle => "cfe_internal_hub_vars_docroot_suse";

}

##################################################################
#
# cfe_internal_update_folders
#  - create temp directories to make CFE silent (self-upgrading)  
#
##################################################################

bundle agent cfe_internal_update_folders
{
 vars:

  "dirs" slist => {
                   "ubuntu_8_i686",
                   "ubuntu_8_x86_64",
                   "ubuntu_10_i686",
                   "ubuntu_10_x86_64",
                   "ubuntu_12_i686",
                   "ubuntu_12_x86_64",
                   "centos_5_i686",
                   "centos_5_x86_64",
                   "centos_6_i686",
                   "centos_6_x86_64",
                   "redhat_5_i686",
                   "redhat_5_x86_64",
                   "redhat_6_i686",
                   "redhat_6_x86_64",
                   "SuSE_11_i686",
                   "SuSE_11_x86_64",
                   "debian_5_i686",
                   "debian_5_x86_64",
                   "debian_6_i686",
                   "debian_6_x86_64",
                   "windows_i686",
                   "windows_x86_64",
                  },
       comment => "Define a list for $(sys.flavour)_$(sys.arch) directories",
        handle => "cfe_internal_update_folders_vars_dirs";

#

 files:

  "$(sys.workdir)/master_software_updates/$(dirs)/." -> { "goal_updated" }
     comment => "Prepare binary upgrade folders for all distributions in our environment",
      handle => "cfe_internal_update_folders_files_create_dirs",
      create => "true";

}

##################################################################
#
# cfe_internal_php_mod 
#  - setup/prepare build-in php modules (CFEngine 3 Enterprise)
#    * cfmod   (ALL)
#    * mongo   (ALL)
#    * svn     (Not in Enterprise 3.0)
#    * json    (RHEL)
#    * mcrypt  (RHEL)
#
##################################################################
#
#bundle agent cfe_internal_php_mod
#{
# files:
#
#  redhat_5|redhat_6|centos_5|centos_6|scientific_5|scientific_6::
#
#   "/etc/php.d/cfmod.ini"
#        comment => "Put cfmod.ini to its place",
#         handle => "cfe_internal_php_mod_files_cfmod_ini_redhat5",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfmod.ini"),
#          perms => mo("644","root");
#
#   "/etc/php.d/json.ini"
#         comment => "Put json.ini to its place",
#          handle => "cfe_internal_php_mod_files_json_ini_redhat5",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/json.ini"),
#           perms => mo("644","root"),
#      ifvarclass => "redhat_5|centos_5";
#
#   "/etc/php.d/mongo.ini"
#        comment => "Put mongo.ini to its place",
#         handle => "cfe_internal_php_mod_files_mongo_ini_redhat5",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/mongo.ini"),
#          perms => mo("644","root");
#
#   "/etc/php.d/curl.ini"
#        comment => "Put curl.ini to its place",
#         handle => "cfe_internal_php_mod_files_curl_ini_redhat5",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/curl.ini"),
#          perms => mo("644","root");
#
#   "/etc/php.d/cfengine-enterprise-api.ini"
#        comment => "Put cfengine-enterprise-api.ini to its place",
#         handle => "cfe_internal_php_mod_files_cfengine_enterprise_api_ini_redhat5",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfengine-enterprise-api.ini"),
#          perms => mo("644","root");
#
#   "/usr/lib64/php/modules/json.so"
#         comment => "Prepare cfmod.so for 64-bit system",
#         handle => "cfe_internal_php_mod_files_json_so_redhat5_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/json.so"),
#           perms => mo("755","root"),
#      ifvarclass => "(redhat_5|centos_5).x86_64";
#
#   "/usr/lib64/php/modules/cfmod.so"
#         comment => "Prepare cfmod.so for 64-bit system",
#         handle => "cfe_internal_php_mod_files_cfmod_so_redhat5_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfmod.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#	     classes => if_repaired("restart_webserver");
#
#   "/usr/lib64/php/modules/mongo.so"
#         comment => "Prepare mongo.so for 64-bit system",
#         handle => "cfe_internal_php_mod_files_mongo_so_redhat5_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/mongo.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#	     classes => if_repaired("restart_webserver");
#
#   "/usr/lib64/php/modules/curl.so"
#         comment => "Prepare curl.so for 64-bit system",
#         handle => "cfe_internal_php_mod_files_curl_so_redhat5_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/curl.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#	     classes => if_repaired("restart_webserver");
#
#   "/usr/lib64/php/modules/cfengine-enterprise-api.so"
#         comment => "Prepare cfengine-enterprise-api.so for 64-bit system",
#         handle => "cfe_internal_php_mod_files_cfengine_enterprise_api_so_redhat5_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfengine-enterprise-api.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#        classes => if_repaired("restart_webserver");
#
#  redhat_5|redhat_6|centos_6|scientific_5|scientific_6::
#
#   "/etc/php.d/mcrypt.ini"
#        comment => "Put mcrypt.ini to its place",
#         handle => "cfe_internal_php_mod_files_mcrypt_ini_redhat5",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/mcrypt.ini"),
#          perms => mo("644","root");
#
#   "/usr/lib64/php/modules/mcrypt.so"
#         comment => "Prepare mcrypt.so for 64-bit system",
#         handle => "cfe_internal_php_mod_files_mcrypt_so_redhat5_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/mcrypt.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#        classes => if_repaired("restart_webserver");
#
#  ubuntu_10|ubuntu_12|debian_squeeze_i386|debian_squeeze_amd64|debian_6::
#
#   "/etc/php5/conf.d/cfmod.ini"
#        comment => "Put cfmod.ini to its place",
#         handle => "cfe_internal_php_mod_files_cfmod_ini_ubuntu10",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfmod.ini"),
#          perms => mo("644","root");
#
#   "/etc/php5/conf.d/mongo.ini"
#        comment => "Put mongo.ini to its place",
#         handle => "cfe_internal_php_mod_files_mongo_ini_ubuntu10",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/mongo.ini"),
#          perms => mo("644","root");
#
#   "/etc/php5/conf.d/curl.ini"
#        comment => "Put curl.ini to its place",
#         handle => "cfe_internal_php_mod_files_curl_ini_ubuntu10",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/curl.ini"),
#          perms => mo("644","root");
#
#   "/etc/php5/conf.d/cfengine-enterprise-api.ini"
#        comment => "Put cfengine-enterprise-api.ini to its place",
#         handle => "cfe_internal_php_mod_files_cfengine_enterprise_api_ini_ubuntu10",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfengine-enterprise-api.ini"),
#          perms => mo("644","root");
#
#   "/usr/lib/php5/20090626/cfmod.so"
#         comment => "Prepare cfmod.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_cfmod_so_ubuntu10_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfmod.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
# 
#   "/usr/lib/php5/20090626/mongo.so"
#         comment => "Prepare mongo.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_mongo_so_ubuntu10_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/mongo.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
# 
#   "/usr/lib/php5/20090626/curl.so"
#         comment => "Prepare curl.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_curl_so_ubuntu10_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/curl.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
# 
#   "/usr/lib/php5/20090626/cfengine-enterprise-api.so"
#         comment => "Prepare cfengine-enterprise-api.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_cfengine_enterprise_api_so_ubuntu10_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfengine-enterprise-api.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
#
#  ubuntu_8|debian_5|ubuntu_9::
#
#   "/etc/php5/conf.d/cfmod.ini"
#        comment => "Put cfmod.ini to its place",
#         handle => "cfe_internal_php_mod_files_cfmod_ini_ubuntu8",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfmod.ini"),
#          perms => mo("644","root");
#
#   "/etc/php5/conf.d/mongo.ini"
#        comment => "Put mongo.ini to its place",
#         handle => "cfe_internal_php_mod_files_mongo_ini_ubuntu8",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/mongo.ini"),
#          perms => mo("644","root");
#
#   "/etc/php5/conf.d/curl.ini"
#        comment => "Put curl.ini to its place",
#         handle => "cfe_internal_php_mod_files_curl_ini_ubuntu8",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/curl.ini"),
#          perms => mo("644","root");
#
#   "/etc/php5/conf.d/cfengine-enterprise-api.ini"
#        comment => "Put cfengine-enterprise-api.ini to its place",
#         handle => "cfe_internal_php_mod_files_cfengine_enterprise_api_ini_ubuntu8",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfengine-enterprise-api.ini"),
#          perms => mo("644","root");
#
#   "/usr/lib/php5/20060613/cfmod.so"
#         comment => "Prepare cfmod.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_cfmod_so_ubuntu8_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfmod.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
# 
#   "/usr/lib/php5/20060613/mongo.so"
#         comment => "Prepare mongo.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_mongo_so_ubuntu8_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/mongo.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
# 
#   "/usr/lib/php5/20060613/curl.so"
#         comment => "Prepare curl.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_curl_so_ubuntu8_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/curl.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
# 
#   "/usr/lib/php5/20060613/cfengine-enterprise-api.so"
#         comment => "Prepare cfengine-enterprise-api.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_cfengine_enterprise_api_so_ubuntu8_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfengine-enterprise-api.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
#
#  SuSE_11|suse_11::
#
#   "/etc/php5/conf.d/cfmod.ini"
#        comment => "Put cfmod.ini to its place",
#         handle => "cfe_internal_php_mod_files_cfmod_ini_suse",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfmod.ini"),
#          perms => mo("644","root");
#
#   "/etc/php5/conf.d/mongo.ini"
#        comment => "Put mongo.ini to its place",
#         handle => "cfe_internal_php_mod_files_mongo_ini_suse",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/mongo.ini"),
#          perms => mo("644","root");
#
#   "/etc/php5/conf.d/curl.ini"
#        comment => "Put curl.ini to its place",
#         handle => "cfe_internal_php_mod_files_curl_ini_suse",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/curl.ini"),
#          perms => mo("644","root");
#
#   "/etc/php5/conf.d/cfengine-enterprise-api.ini"
#        comment => "Put cfengine-enterprise-api.ini to its place",
#         handle => "cfe_internal_php_mod_files_cfengine_enterprise_api_ini_suse",
#      copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfengine-enterprise-api.ini"),
#          perms => mo("644","root");
#
#   "/usr/lib64/php5/extensions/cfmod.so"
#         comment => "Prepare cfmod.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_cfmod_so_suse_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfmod.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
#
#   "/usr/lib64/php5/extensions/mongo.so"
#         comment => "Prepare mongo.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_mongo_so_suse_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/mongo.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
#
#   "/usr/lib64/php5/extensions/curl.so"
#         comment => "Prepare curl.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_curl_so_suse_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/curl.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
#
#   "/usr/lib64/php5/extensions/cfengine-enterprise-api.so"
#         comment => "Prepare cfengine-enterprise-api.so for 64-bit system",
#          handle => "cfe_internal_php_mod_files_cfengine_enterprise_api_so_suse_64",
#       copy_from => no_backup_dcp("$(sys.workdir)/lib/php/cfengine-enterprise-api.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#         classes => if_repaired("restart_webserver");
#
#
#
# commands:
#
#  restart_webserver.redhat::
#
#   "/bin/sleep 1 && /etc/init.d/httpd restart" -> { "goal_availabilty" }
#      comment => "Restart httpd service on RedHat/CentOS",
#       handle => "cfe_internal_php_mod_commands_httpd_redhat",
#      contain => in_shell;
#
#  restart_webserver.debian::
#
#   "/bin/sleep 1 && /etc/init.d/apache2 restart" -> { "goal_availabilty" }
#      comment => "Restart apache2 service on Debian/Ubuntu",
#       handle => "cfe_internal_php_mod_commands_apache2_debian",
#      contain => in_shell;
#
#  restart_webserver.SuSE::
#
#   "/bin/sleep 1 && /etc/init.d/apache2 restart"  -> { "goal_availabilty" }
#      comment => "Restart apache2 service on SuSE",
#       handle => "cfe_internal_php_mod_commands_apache2_suse",
#      contain => in_shell;
#
#}

##################################################################
#
# cfe_internal_policysrv 
#  - software and processes on policy server (CFEngine Enterprise)
#
##################################################################
#
#bundle agent cfe_internal_policysrv
#
#{
# vars:
#
#  SuSE.am_policy_hub::
#
#   "match_package" slist => { 
#                             "apache2", 
#                             "apache2-mod_php5",
#                             "apache2-prefork",
#                             "php5",
#                             "php5-json",
#                             "php5-pear",
#                             "php5-mcrypt",
#                             "php5-pdo",
#                            },
#                 comment => "Define a list of packages to be installed on SuSE",
#                  handle => "cfe_internal_policysrv_vars_match_package_suse";
#
#   "buffer"  string => readfile("/etc/sysconfig/clock", "9999"),
#            comment => "Get the whole contents of the file to extract a timezone later on",
#             handle => "cfe_internal_policysrv_vars_buffer_suse";
#
#  (redhat_5|scientific_5).am_policy_hub::
#
#   "match_package" slist => {
#                             "httpd",
#                             "mod_ssl",
#                             "php",
#                             "php-bcmath",
#                             "php-pear",
#                             "php-pdo",
#                            },
#                 comment => "Define a list of packages to be installed on RedHat",
#                  handle => "cfe_internal_policysrv_vars_match_package_redhat_5";
#
#  (redhat_6|centos_6|scientific_6).am_policy_hub::
#
#   "match_package" slist => {
#                             "httpd",
#                             "mod_ssl",
#                             "php",
#                             "php-bcmath",
#                             "php-pear",
#                             "php-pdo",
#                            },
#                 comment => "Define a list of packages to be installed on RedHat",
#                  handle => "cfe_internal_policysrv_vars_match_package_redhat_6";
#
#  centos_5.am_policy_hub::
#
#   "match_package" slist => {
#                             "httpd",
#                             "mod_ssl",
#                             "php",
#                             "php-bcmath",
#                             "php-pear",
#                             "php-mcrypt",
#                             "php-pdo",
#                            },
#                 comment => "Define a list of packages to be installed on CentOS/Fedora",
#                  handle => "cfe_internal_policysrv_vars_match_package_centos_5";
#
#  debian.am_policy_hub::
#
#   "match_package"  slist => {
#                              "apache2",
#                              "php5",
#                              "ssl-cert",
#                              "php5-cli",
#                              "php-pear",
#                              "php5-mcrypt",
#                              "php5-sqlite",
#                            },
#                  comment => "Define a list of packages to be installed on Debian/Ubuntu",
#                   handle => "cfe_internal_policysrv_vars_match_package_debian";
#
#
#
# classes:
#
#  redhat.am_policy_hub::
#
#   "have_httpd_conf" expression => fileexists("/etc/httpd/conf/httpd.conf"),
#                        comment => "Check if there is httpd.conf in place",
#                         handle => "cfe_internal_policysrv_classes_have_httpd_conf";
#
#  SuSE.am_policy_hub::
#
#   "suse_ok" expression => regextract(
#                                     "TIMEZONE=\"(.*?)\"",
#                                     "$(buffer)",
#                                     "timezone"
#                                     ),
#                comment => "Extract system timezone to use later on",
#                 handle => "cfe_internal_policysrv_classes_extract_system_timezone";
#
#  (ubuntu_8|ubuntu_10|ubuntu_12|debian_5|debian_6).am_policy_hub::
#
#   "no_backup_apache2_default"     not => fileexists("$(sys.workdir)/software_updates/apache2-default"),
#                               comment => "Check if there is a backup of apache2 default config or not",
#                                handle => "cfe_internal_policysrv_classes_no_backup_apache2_default_ubuntu";
#
#   "no_php5_module"        not => fileexists("/etc/apache2/mods-enabled/php5.load"),
#                       comment => "Check if php5 module is enabled",
#                        handle => "cfe_internal_policysrv_classes_no_php5_module_ubuntu";
#
#   "no_rewrite_module"     not => fileexists("/etc/apache2/mods-enabled/rewrite.load"),
#                       comment => "Check if rewrite module is enabled",
#                        handle => "cfe_internal_policysrv_classes_no_rewrite_module_ubuntu";
#
#   "have_apache2_default" expression => fileexists("/etc/apache2/sites-available/default"),
#                             comment => "Check if there is apache2/site-available/default in place",
#                              handle => "cfe_internal_policysrv_classes_have_apache2_default";
#
#
#
# packages:
#
#  SuSE.am_policy_hub::
#
#   "$(match_package)"
#
#             comment => "Install packages from the list",
#              handle => "cfe_internal_policysrv_packages_install_package_suse",
#      package_policy => "add",
#      package_method => zypper,
#             classes => cf2_if_else("a2enmod_ssl_rewrite","dep_failure");
#
#  redhat.am_policy_hub::
#
#   "$(match_package)"
#
#             comment => "Install packages from the list",
#              handle => "cfe_internal_policysrv_packages_install_package_redhat",
#      package_policy => "add",
#      package_method => yum_rpm,
#             classes => cf2_if_else("do_nothing","dep_failure");
#
#  debian.am_policy_hub::
#
#   "$(match_package)"
#
#             comment => "Install packages from the list",
#              handle => "cfe_internal_policysrv_packages_install_package_debian",
#      package_policy => "add",
#      package_method => apt,
#             classes => cf2_if_else("a2enmod_php5_rewrite","dep_failure");
#
#
#
# processes:
#
#   "mongod" restart_class => "remove_mongod_lock",
#                  comment => "Check if mongod process is dead",
#                   handle => "cfe_internal_policysrv_mongod_lock_cleanup";
#
#
#
# commands:
#
#  a2enmod_php5_rewrite::
#
#   "/usr/sbin/a2enmod php5"
#         comment => "Enable apache2 php5 modules on Debian/Ubuntu",
#          handle => "cfe_internal_policysrv_commands_a2enmod_php5_debian",
#         contain => in_shell,
#      ifvarclass => "no_php5_module";
#
#   "/usr/sbin/a2enmod rewrite"
#         comment => "Enable apache2 rewrite modules on Debian/Ubuntu",
#          handle => "cfe_internal_policysrv_commands_a2enmod_rewrite_debian",
#         contain => in_shell,
#      ifvarclass => "no_rewrite_module";  
#
#  restart_apache2::
#
#   "/sbin/service apache2 restart" -> { "goal_availability" }
#      comment => "Restart APACHE2 on SLES/OpenSuSE",
#       handle => "cfe_internal_policysrv_commands_restart_apache2";
#
#  a2enmod_ssl_rewrite::
#
#   "/usr/sbin/a2enmod ssl && /usr/sbin/a2enflag SSL && /usr/bin/gensslcert"
#      comment => "Enable apache modules on SuSE",
#       handle => "cfe_internal_policysrv_commands_a2enmod_ssl_suse";
#
#   "/usr/sbin/a2enmod rewrite"
#      comment => "Enable PHP Rewrite modules on SuSE",
#       handle => "cfe_internal_policysrv_commands_a2enmod_rewrite_suse";
#
#  a2ensite_ssl::
#
#   "/usr/sbin/a2ensite ssl"
#      comment => "Enable apache SSL on Debian/Ubuntu",
#       handle => "cfe_internal_policysrv_commands_a2ensite_ssl";
#
#  restart_httpd::
#
#   "/sbin/service httpd restart" -> { "goal_availability" }
#      comment => "Restart HTTPD on Redhat/CentOS/Fedora",
#       handle => "cfe_internal_policysrv_commands_restart_httpd";
#
#  restart_apache2_debian::
#
#   "/etc/init.d/apache2 restart "
#      comment => "Restart APACHE2 on Debian/Ubuntu",
#       handle => "cfe_internal_policysrv_commands_restart_apache2_debian";
#
#
#
# files:
#
#  debian.am_policy_hub::
#
#   "/var/www/."
#           comment => "Clear up index.html page if there is",
#            handle => "cfe_internal_policysrv_files_tidy_index_html",
#            delete => tidy,
#       file_select => by_name("index.html"),
#      depth_search => recurse("1");
#
#   "$(sys.workdir)/software_updates/apache2-default"
#         comment => "Back up a apache2 default config before editing",
#          handle => "cfe_internal_policysrv_files_backup_apache2_default",
#       copy_from => no_backup_dcp("/etc/apache2/sites-available/default"),
#      ifvarclass => "no_backup_apache2_default.have_apache2_default";
#
#   "/etc/apache2/sites-available/default"
#            comment => "Manage apache2 default config for Enterprise to be running nicely",
#             handle => "cfe_internal_policysrv_files_apache2_site_available_default",
#      edit_defaults => empty,
#          edit_line => apache2_nova_default,
#            classes => if_repaired("restart_apache2_debian"),
#         ifvarclass => "have_apache2_default";
#
#   "/etc/apache2/sites-available/ssl"
#        comment => "Prepare SSL config for available sites",
#         handle => "cfe_internal_policysrv_files_ssl",
#      copy_from => no_backup_dcp("/etc/apache2/sites-available/default-ssl"),
#         action => immediate,
#        classes => if_repaired("a2ensite_ssl");
#
#  SuSE.am_policy_hub::
#
#   "/etc/apache2/vhosts.d/vhost-ssl.conf"
#        comment => "Prepare SSL template for virtual hosts",
#         handle => "cfe_internal_policysrv_files_vhost_ssl",
#      copy_from => no_backup_dcp("/etc/apache2/vhosts.d/vhost-ssl.template"),
#         action => immediate;
#
#   "/etc/apache2/conf.d/nova.conf"
#            comment => "Allow Override all and Encoded slashes to $(cfe_internal_hub_vars.docroot)",
#             handle => "cfe_internal_policysrv_files_apache_nova_conf_suse",
#             create => "true",
#      edit_defaults => empty,
#          edit_line => apache_nova_conf("$(cfe_internal_hub_vars.docroot)"),
#            classes => if_repaired("restart_apache2");
#
#   "/etc/php5/apache2/php.ini"
#        comment => "Ensure that date.timezone in php.ini has the same value as the machine",
#         handle => "cfe_internal_policysrv_files_apache_php_ini",
#      edit_line => add_php_timezone("$(timezone[1])");
#
#  redhat.am_policy_hub::
#
#   "/etc/httpd/conf.d/nova.conf"
#            comment => "Allow Override all and Encoded slashes to $(cfe_internal_hub_vars.docroot)",
#             handle => "cfe_internal_policysrv_files_apache_nova_conf_redhat",
#             create => "true",
#      edit_defaults => empty,
#          edit_line => apache_nova_conf("$(cfe_internal_hub_vars.docroot)"),
#            classes => if_repaired("restart_httpd");
#
#   "/etc/httpd/conf/httpd.conf"
#         comment => "To append CFE nova.conf to be used for a web server",
#          handle => "cfe_internal_policysrv_files_append_nova_conf_line_httpd_conf",
#       edit_line => append_if_no_line("Include conf.d/nova.conf"),
#         classes => if_repaired("restart_httpd"),
#      ifvarclass => "have_httpd_conf";
#
#  remove_mongod_lock::
#
#   "$(cfe_internal_update_policy.mongodb_dir)/mongod.lock"
#        comment => "Remove stale mongod lock file",
#         handle => "cfe_internal_policysrv_files_remove_mongod_lock",
#         delete => tidy;
#
#
#
# reports:
#
#  dep_failure::
#
#   "WARNING: One of software dependencies failed to install due to repository/network connection error"
#      comment => "Print warning on screen/syslog",
#       handle => "cfe_internal_policysrv_reports_warning_dep_install_failed";
#
#}
#
#
#
#bundle edit_line apache_nova_conf(folder)
#{
# insert_lines:
#"<Directory \"$(folder)\">
#  Options Indexes FollowSymLinks
#  AllowOverride All
#  Order allow,deny
#  Allow from all
#</Directory>
#AllowEncodedSlashes On"
#   comment => "Create apache2 contents for a Master HUB",
#    handle => "cfe_internal_apache_nova_conf_insert_lines_am_hub_master";
#}
#
#
#
#bundle edit_line apache2_nova_default
#{
# insert_lines:
#"<VirtualHost *:80>
#$(const.t)ServerAdmin webmaster@localhost
#
#$(const.t)DocumentRoot /var/www/
#$(const.t)<Directory />
#$(const.t)$(const.t)Options FollowSymLinks
#$(const.t)$(const.t)AllowOverride All
#$(const.t)</Directory>
#$(const.t)<Directory /var/www/>
#$(const.t)$(const.t)Options Indexes FollowSymLinks MultiViews
#$(const.t)$(const.t)AllowOverride All
#$(const.t)$(const.t)Order allow,deny
#$(const.t)$(const.t)allow from all
#$(const.t)</Directory>
#$(const.t)AllowEncodedSlashes On
#
#$(const.t)ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
#$(const.t)<Directory \"/usr/lib/cgi-bin\">
#$(const.t)$(const.t)AllowOverride None
#$(const.t)$(const.t)Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
#$(const.t)$(const.t)Order allow,deny
#$(const.t)$(const.t)Allow from all
#$(const.t)</Directory>
#
#$(const.t)ErrorLog /var/log/apache2/error.log
#
#$(const.t)# Possible values include: debug, info, notice, warn, error, crit,
#$(const.t)# alert, emerg.
#$(const.t)LogLevel warn
#
#$(const.t)CustomLog /var/log/apache2/access.log combined
#$(const.t)ServerSignature On
#
#$(const.t)Alias /doc/ \"/usr/share/doc/\"
#$(const.t)<Directory \"/usr/share/doc/\">
#$(const.t)$(const.t)Options Indexes MultiViews FollowSymLinks
#$(const.t)$(const.t)AllowOverride None
#$(const.t)$(const.t)Order deny,allow
#$(const.t)$(const.t)Deny from all
#$(const.t)$(const.t)Allow from 127.0.0.0/255.0.0.0 ::1/128
#$(const.t)</Directory>
#
#</VirtualHost>"
#   comment => "Create apache2 default contents on Ubuntu",
#    handle => "cfe_internal_apache2_nova_default_insert_lines_site_available_default";
#
#}
#
#
#
#bundle edit_line add_php_timezone(xxx)
#{
# replace_patterns:
#  ";date.timezone.*"
#          comment => "Assign system timezone to PHP",
#           handle => "cfe_internal_add_php_timezone_replace_patterns_date_timezone",
#     replace_with => value("date.timezone = $(xxx)");
#  "date.timezone\h+=\h+(?!$(xxx)).*"
#     replace_with => value("date.timezone = $(xxx)");
#}

##################################################################
#
# cfe_internal_web_server(on/off) 
#  - Apache Web Modules (CFEngine 3 Enterprise)
#
##################################################################
#
#bundle agent cfe_internal_web_server(state)
#{
# vars:
#
#  "start_type"  string => "start",
#               comment => "Define a start signal",
#                handle => "cfe_internal_web_server_vars_start_type";
#
#
#			
# classes:
#
#  "web_servers"      or => { "am_policy_hub" },
#                comment => "Alias a name am_policy_hub to webservers",
#                 handle => "cfe_internal_web_server_classes_web_servers";
#
#  "on"       expression => strcmp("$(state)","on"),
#                comment => "Check if a keyword \"on\" is inputs",
#                 handle => "cfe_internal_web_server_classes_on";
#
#  "off"      expression => strcmp("$(state)","off"),
#                comment => "Check if a keyword \"off\" is inputs",
#                 handle => "cfe_internal_web_server_classes_off";
#
#
#
# processes:
#
#  SuSE.web_servers.on::
#
#   "apache2"
#      restart_class => "suse_start_apache",
#            comment => "Start apache2 process if not exist",
#             handle => "cfe_internal_web_server_processes_apache_on_suse";
#
#  redhat.web_servers.on::
#
#   ".*httpd.*"
#      restart_class => "redhat_start_apache",
#            comment => "Start httpd process if not exist",
#             handle => "cfe_internal_web_server_processes_httpd_on_redhat";
#
#  debian.web_servers.on::
#
#   ".*apache2.*"
#      restart_class => "debian_start_apache",
#            comment => "Start apache2 process if not exist",
#             handle => "cfe_internal_web_server_processes_apache_on_debian";
#
#  SuSE.off::
#
#   "apache2"
#      process_stop => "/etc/init.d/apache2 stop",
#           comment => "Stop apache2 process",
#            handle => "cfe_internal_web_server_processes_apache_off_suse";
#
#  redhat.off::
#
#   "/usr/sbin/httpd"
#      process_stop => "/etc/init.d/httpd stop",
#           comment => "Stop httpd process",
#            handle => "cfe_internal_web_server_processes_httpd_off_redhat";
#
#  debian.off::
#
#   "/usr/sbin/apache2.*"
#      process_stop => "/etc/init.d/apache2 stop",
#           comment => "Stop apache2 process",
#            handle => "cfe_internal_web_server_processes_apache_off_debian";
#
#
#
# commands:
#
#  web_ok.suse_start_apache::
#
#   "/etc/init.d/apache2 $(start_type)"
#      comment => "Start apache2 process if not exist",
#       handle => "cfe_internal_web_server_commands_start_apache_suse";
#
#  redhat_start_apache::
#
#   "/etc/init.d/httpd $(start_type)"
#      comment => "Start httpd process if not exist",
#       handle => "cfe_internal_web_server_commands_start_httpd_redhat";
#
#  debian_start_apache::
#
#   "/etc/init.d/apache2 $(start_type)"
#      comment => "Start apache process if not exist",
#       handle => "cfe_internal_web_server_commands_start_apache_debian";
#
#
#
# files:
#
#  SuSE.web_servers::
#
#   "/etc/sysconfig/apache2" 
#        comment => "Ensure apache2 modules will be loaded",
#         handle => "cfe_internal_web_server_files_sysconfig_apache2",
#      edit_line => fixapache,
#        classes => if_ok("web_ok");
#
# redhat.web_servers::
#
#  "/etc/httpd/conf/httpd.conf"
#
#     edit_line => comment_lines_matching("Listen 80","#"),
#     classes => if_ok("web_ok");
#
# debian.web_servers::
#
#  "/etc/apache2/ports.conf"
#
#     edit_line => append_if_no_line("Listen 443"),
#     classes => if_ok("web_ok");
#
#}

#######################################################
# For the library
#######################################################

#bundle edit_line fixapache
#{
# vars:
#
#   "add_modules"     slist => { 
#                               "php5",
#                               "ssl",
#                               "rewrite" 
#                              };
#
#   "del_modules"     slist => { 
#                               "php3",
#                               "php4",
#                               "jk"
#                              };
#
# field_edits:
#
#####################################################################
# APACHE_MODULES="actions alias ssl php5 dav_svn authz_default jk" etc..
#####################################################################
#
#   "APACHE_MODULES=.*"

      # Insert module "columns" between the quoted RHS 
      # using space separators
#
#      edit_field => quoted_var("$(add_modules)","append");
#
#   "APACHE_MODULES=.*"

      # Delete module "columns" between the quoted RHS 
      # using space separators
#
#      edit_field => quoted_var("$(del_modules)","delete");
#
#}

##################################################################
#
# cfe_internal_editor 
#  - Prepare the hub for CFE online editing tool (CFEngine 3 Enterprise)
#
##################################################################
#
#bundle agent cfe_internal_editor
#{
# vars:
#
#  redhat::
#
#   "web_owner"   string => "apache",
#                comment => "Define an owner for online editor",
#                 handle => "cfe_internal_editor_vars_web_owner_redhat";
#
#   "web_group"   string => "apache",
#                comment => "Define a group for online editor",
#                 handle => "cfe_internal_editor_vars_web_group_redhat";
#
#  SuSE::
#
#   "web_owner"   string => "wwwrun",
#                comment => "Define an owner for online editor",
#                 handle => "cfe_internal_editor_vars_web_owner_suse";
#
#   "web_group"   string => "www",
#                comment => "Define a group for online editor",
#                 handle => "cfe_internal_editor_vars_web_group_suse";
#
#  debian::
#
#   "web_owner"   string => "www-data",
#                comment => "Define an owner for online editor",
#                 handle => "cfe_internal_editor_vars_web_owner_debian";
#
#   "web_group"   string => "www-data",
#                comment => "Define a group for online editor",
#                 handle => "cfe_internal_editor_vars_web_group_debian";
#
#
#
# files:
#
#  !windows.am_policy_hub::
#
#   "$(cfe_internal_hub_vars.docroot)/graphs/." -> "CFEngine 3 Enterprise Knowledge Map"
#       create => "true",
#        perms => mog("755","$(web_owner)","$(web_group)"),
#      comment => "Make sure web server has permission to create working directories for Knowledge Map",
#       handle => "cfe_internal_editor_files_graphs_dir";
#
#  !windows.am_policy_hub::
#
#   "$(cfe_internal_hub_vars.docroot)/policies/." -> "CFEngine 3 Enterprise Editor"
#       create => "true",
#        perms => mog("700","$(web_owner)","$(web_group)"),
#      comment => "Make sure web server has permission to create working directories for editor users",
#       handle => "cfe_internal_editor_files_policies_dir";
#
#  !windows.am_policy_hub::
#
#   "$(cfe_internal_hub_vars.docroot)/policies/." -> "CFEngine 3 Enterprise Editor"
#            delete => tidy,
#       file_select => days_old("1"),
#      depth_search => recurse("inf"),
#           comment => "Remove working directories of old editor sessions",
#            handle => "cfe_internal_editor_files_policies_tidy";
#
#  !windows.am_policy_hub::
#
#   "$(cfe_internal_hub_vars.docroot)/tmp/." -> "CFEngine 3 Enterprise Editor"
#       create => "true",
#        perms => mog("755","$(web_owner)","$(web_group)"),
#      comment => "Make sure web server has permission to create tmp directories for apache internal use",
#       handle => "cfe_internal_editor_files_tmp_dir";
#
#}

##################################################################
#
# cfe_internal_rotate_mongod_log
#  - Make sure to rotate the mongod.log to avoid disk filling up
#
##################################################################

bundle agent cfe_internal_rotate_mongod_log {
 
files:
 
   mongod_log_rotated::
 
     "/var/log"
        comment => "Remove mongod logs older than 5 weeks",
         handle => "cfe_internal_rotate_mongod_log_files_mongo_log",
    file_select => name_age("^mongod.log.\d{4}-\d{2}-\d{2}T\d{2}-\d{2}-\d{2}$","35"),
   depth_search => recurse("1"),
         delete => tidy;
 
processes:
 
   Sunday::
 
    "mongod"
       comment  => "Send mongod the SIGUSR signal to refresh the log on a weekly basis",
        handle  => "cfe_internal_rotate_mongod_log_processes_mongod",
        signals => { "usr1" },
        classes => if_repaired("mongod_log_rotated"),
         action => if_elapsed("10000");
 
}

##################################################################
#
# cfe_internal_disable_selinux ***OBSOLETE***
#  - Ensure everything will work smoothly. Put SELinux to
# Permissive mode by now
#
##################################################################

bundle agent cfe_internal_disable_selinux
{
 classes:

# we only care about selinux for redhat for now, can add more

  redhat::
 
   "selinux_exists" expression => fileexists("/usr/sbin/selinuxenabled"),
                       comment => "Make sure the binary exists",
                        handle => "cfe_internal_disable_selinux_classes_selinux_exits";
 
  redhat.selinux_exists::
 
   "disable_selinux" expression => returnszero("/usr/sbin/selinuxenabled", "noshell"),
                        comment => "Check if selinux is enabled",
                         handle => "cfe_internal_disable_selinux_classes_disable_selinux"; 

#

 commands:

  am_policy_hub.disable_selinux::

   "/usr/sbin/setenforce 0"
      comment => "Disable SELINUX every hour",
       handle => "cfe_internal_disable_selinux_commands_disable_selinux",
#      classes => cmd_repair("0", "cmd_fixed_setenforce"),
       action => if_elapsed("60");

#

 reports:

  disable_selinux::

   " NB - Disabling SELinux to allow PHP to function"
      comment => "Alert message on screen once a day",
       handle => "cfe_internal_disable_selinux_reports_disable_selinux",
       action => if_elapsed("1440");

}

##################################################################
#
# cfe_internal_selinux(condition)
#  - Allow SELinux to run Mission Portal and Mongo DB
#
# condition
#   fix: Leave SELinux running and pierce a hole for Mission Portal
#   disable: Like what we have done. Set SELinux to Permissive mode
#
##################################################################

bundle agent cfe_internal_selinux(condition)
{
 vars:

  redhat::

   "selinux_status"  string => execresult("/usr/sbin/getenforce","noshell"),
                    comment => "Get SELinux status",
                     handle => "cfe_internal_selinux_vars_selinux_status";

  redhat_6|centos_6|oracle_6|scientific_6::

   "selinux_packages" slist => {
                                "policycoreutils-python",
                                "prelink",
                               },
                      comment => "List of packages to be installed for RHEL 6",
                       handle => "cfe_internal_selinux_vars_selinux_packages";

#

 classes:

  redhat::

   "have_semanage"      expression => fileexists("/usr/sbin/semanage"),
                           comment => "Install packages from the list",
                            handle => "cfe_internal_selinux_classes_have_semanage";

   "fix_selinux"        expression => strcmp("$(condition)","fix"),
                           comment => "Check to allow SELinux rules for Mission Portal to function",
                            handle => "cfe_internal_selinux_classes_fix_selinux";

   "disable_selinux"    expression => strcmp("$(condition)","disable"),
                           comment => "Check to disable SELinux",
                            handle => "cfe_internal_selinux_classes_disable_selinux";

   "selinux_enforcing"  expression => strcmp("Enforcing","$(selinux_status)"),
                           comment => "Check if SELinux is running",
                            handle => "cfe_internal_selinux_classes_selinux_enforcing";

   "selinux_disabled"   expression => strcmp("Disabled","$(selinux_status)"),
                           comment => "Check if SELinux is disabled",
                            handle => "cfe_internal_selinux_classes_selinux_disabled";

  have_semanage.!selinux_disabled::

   "httpd_can_network_connect" not => returnszero("/usr/sbin/getsebool -a | grep \"httpd_can_network_connect --> on\" > /dev/null", "useshell"),
                           comment => "Check if httpd_can_network_connect is permitted",
                            handle => "cfe_internal_selinux_classes_httpd_can_network_connect";

#

 packages:

   redhat_6|centos_6|oracle_6|scientific_6::

      "$(selinux_packages)"
                comment => "Install packages from the list",
                 handle => "cfe_internal_selinux_packages_install_selinux_packages",
         package_policy => "add",
         package_method => yum_rpm;
    
#

 commands:

  selinux_enforcing.fix_selinux.have_semanage::

   "/usr/bin/chcon -R -h -t httpd_sys_content_t /var/cfengine/lib"
      comment => "Allow apache to load CFEngine shared libraries with SELinux on",
       handle => "cfe_internal_selinux_commands_allow_httpd_sys_content_t_cfengine_lib";

   "/usr/bin/chcon -R -h -t httpd_sys_content_t /var/cfengine/policy_server.dat"
      comment => "Fix problem with SELinux",
       handle => "cfe_internal_selinux_commands_allow_httpd_sys_content_t_policy_server_dat";

   "/usr/bin/execstack -c /var/cfengine/lib/*.so.*"
      comment => "Make shared libraries not to require executable stack",
       handle => "cfe_internal_selinux_commands_fix_shared_libraries",
      contain => in_shell;

 # Allow httpd_can_network_connect so HTTPD will be able to talk with MongoDB

  httpd_can_network_connect.fix_selinux::

   "/usr/sbin/setsebool -P httpd_can_network_connect 1"
      comment => "SELinux allows HTTPD to use files on the host",
       handle => "cfe_internal_selinux_commands_allow_httpd_can_network_connect";

  disable_selinux::

   "/usr/sbin/setenforce 0"
      comment => "Disable SELinux every hour",
       handle => "cfe_internal_selinux_commands_disable_selinux",
#      classes => cmd_repair("0", "cmd_fixed_setenforce"),
       action => if_elapsed("60");

#

 reports:

  disable_selinux::

   "NB - Disabling SELinux to allow Apache+PHP to function"
      comment => "Alert message on screen once a day",
       handle => "cfe_internal_selinux_reports_disable_selinux",
       action => if_elapsed("1440");

}

##################################################################
#
# cfe_internal_hub_maintain
#  - Start the hub maintenance process
#  - By default, this is run every 6 hours
#
#  When modifying this, the following must be considered:
#  - Intervals less than 6 hours must be used with caution
#       as maintenance process could take a considerable time
#  - parameters to action => bg("<if_elapsed>", "<expireafter>")
#       must be changed accordingly
##################################################################

bundle agent cfe_internal_hub_maintain
{
 commands:

  (Hr00|Hr06|Hr12|Hr18).Min00_05::

   "$(sys.cf_hub) -m"
      comment => "Perform hub database maintenance. This removes expired entries in the enterprise database and creates a total compliance cache for Mission Portal",
       handle => "cfe_internal_start_hub_start_maintenance",
       action => bg("60","60");
}

##################################################################
#
# cfe_internal_apache_sudoer
#  - permit apache user to run passwordless sudo to cf-runagent
#
##################################################################

bundle agent cfe_internal_apache_sudoer
{
 files:

  linux::
  
   "/etc/sudoers"
        comment => "Permit Apache user to run passwordless sudo cf-runagent",
         handle => "cfe_internal_apache_sudoer_files_etc_sudoer",
      edit_line => apache_sudoer;
}

#

bundle edit_line apache_sudoer
{
 insert_lines:

  debian::

   "www-data ALL=(ALL) NOPASSWD:/var/cfengine/bin/cf-runagent *"
      comment => "Add Apache user to run passwordless sudo cf-runagent",
       handle => "apache_sudoer_inserts_debian";

  redhat::

   "apache ALL=(ALL) NOPASSWD:/var/cfengine/bin/cf-runagent *"
      comment => "Add Apache user to run passwordless sudo cf-runagent",
       handle => "apache_sudoer_inserts_redhat";
   
  SuSE::
  
   "wwwrun ALL=(ALL) NOPASSWD:/var/cfengine/bin/cf-runagent *"
      comment => "Add Apache user to run passwordless sudo cf-runagent",
       handle => "apache_sudoer_inserts_suse";
}


##################################################################
#
# cfe_internal_webserver(on/off)
#  ***this is a new one***
##################################################################

bundle agent cfe_internal_webserver(state)
{

 classes:

  "on"       expression => strcmp("$(state)","on"),
                comment => "Check if a keyword \"on\" is inputs",
                 handle => "cfe_internal_webserver_classes_on";

  "off"      expression => strcmp("$(state)","off"),
                comment => "Check if a keyword \"off\" is inputs",
                 handle => "cfe_internal_webserver_classes_off";

#

 processes:

  am_policy_hub.on::
  
   ".*/var/cfengine/httpd/bin/httpd.*"
      restart_class => "start_cfe_httpd",
            comment => "Check if CFE httpd process exists or not",
             handle => "cfe_internal_webserver_processes_start_cfe_httpd";

#

 commands:
 
  start_cfe_httpd::
  
   "/var/cfengine/httpd/bin/apachectl start"
      comment => "Start CFE httpd process if not exist",
       handle => "cfe_internal_webserver_commands_start_cfe_httpd";
}
