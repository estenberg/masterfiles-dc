################################################################################
#
# DO NOT EDIT THIS FILE. All policy files prefixed with CFE_ and update_bins.cf
# are maintained by CFEngine and its original state is required for internal 
# operations of CFEngine. If the file has been modified CFEngineâ€™s upgrades 
# may require manual intervention. Contact CFEngine support if additional 
# information and/or recommendation is needed.
#
################################################################################
################################################################################
# 
# update_processes
#  - To enable/disable CFEngine based processes, use the slists below.
#
################################################################################

bundle agent cfe_internal_update_processes
{
 vars:

  any::

   "agent_to_be_disabled"   slist => {
                                     },
                          comment => "CFE processest to be terminated",
                           handle => "cfe_internal_update_processes_vars_agent_to_be_disabled";

   "agent_to_be_enabled"    slist => {
                                      "cf-execd",
                                      "cf-serverd", 
                                      "cf-monitord", 
                                     },
                          comment => "CFE processest to be terminated",
                           handle => "cfe_internal_update_processes_vars_agent_to_be_enable";
   
#

 methods:

  am_policy_hub::

  "TAKING CARE CFE HUB PROCESSES"
     usebundle => maintain_cfe_hub_process,
       comment => "Call a bundle to maintian HUB processes",
        handle => "cfe_internal_update_processes_methods_maintain_hub";
    
  !windows::

   "DISABLING CFE AGENTS"
      usebundle => disable_cfengine_agents("$(agent_to_be_disabled)"),
        comment => "Call a bundle to disable CFEngine given processes",
         handle => "cfe_internal_update_processes_methods_disabling_cfe_agents";

   "ENABLING CFE AGENTS"
      usebundle => enable_cfengine_agents("$(agent_to_be_enabled)"),
        comment => "Call a bundle to enable CFEngine given processes",
         handle => "cfe_internal_update_processes_methods_enabling_cfe_agents";

  windows::

   "CFENGINE on Windows"
      usebundle => maintain_cfe_windows,
        comment => "Call a bundle to maintain CFEngine on Windows",
         handle => "cfe_internal_update_processes_methods_maintain_windows";
   
}

#
###############################################################################
#

bundle agent maintain_cfe_hub_process
{
 vars:

  am_policy_hub::

   "file_check"  string => translatepath("$(cfe_internal_update_policy.inputs_dir)/promises.cf"),
                comment => "Path to a policy file",
                 handle => "cfe_internal_maintain_cfe_hub_process_vars_file_check";

#

 classes:

  am_policy_hub::

   "files_ok" expression => fileexists("$(file_check)"),
                 comment => "Check for /var/cfengine/inputs/promises.cf",
                  handle => "cfe_internal_maintain_cfe_hub_process_classes_files_ok";

#

 processes:

  am_policy_hub::

   "$(sys.workdir)/bin/mongod"
      restart_class => "start_mongod",
            comment => "Monitor mongodb process",
             handle => "cfe_internal_maintain_cfe_hub_process_processes_mongod",
         ifvarclass => "nova|enterprise";

  am_policy_hub.files_ok.!windows::

   "cf-hub"      restart_class => "start_hub",
                       comment => "Monitor cf-hub process",
                        handle => "cfe_internal_maintain_cfe_hub_process_processes_cf_hub",
                    ifvarclass => "nova|enterprise";

#

 commands:

  !windows.am_policy_hub.start_mongod::

   "$(sys.workdir)/bin/mongod --dbpath $(cfe_internal_update_policy.mongodb_dir) --config $(cfe_internal_update_policy.mongodb_conf_file) > /dev/null < /dev/null 2>&1"
       contain => u_in_shell,
        action => u_mongod_bg,
       comment => "Start mongod process",
        handle => "cfe_internal_maintain_cfe_hub_process_commands_start_mongod";

  !windows.am_policy_hub.start_hub::

   "$(sys.cf_hub)"
      comment => "Start cf-hub process",
       handle => "cfe_internal_maintain_cfe_hub_process_commands_start_cf_hub";

}

#
###############################################################################
#

bundle agent disable_cfengine_agents(process)
{
 vars:

  !windows::

   "cprocess"    string => canonify("$(process)"),
                comment => "Canonify a given process",
                 handle => "cfe_internal_disable_cfengine_agents_vars_cprocess";

   "file_check"  string => translatepath("$(cfe_internal_update_policy.inputs_dir)/promises.cf"),
                comment => "Path to a policy file",
                 handle => "cfe_internal_disable_cfengine_agents_vars_file_check";

#

 classes:

  !windows::

   "disable_$(cprocess)" expression => strcmp("$(process)","$(process)"),
                            comment => "Create a class to disable a given process",
                             handle => "cfe_internal_disable_cfengine_agents_classes_disable_process";

   "files_ok"         expression => fileexists("$(file_check)"),
                         comment => "Check for /var/cfengine/inputs/promises.cf",
                          handle => "cfe_internal_disable_cfengine_agents_classes_files_ok";

#

 processes:
 
   "$(sys.workdir)/bin/$(process)"
         signals => { "term" },
         comment => "Terminate cf-monitord",
          handle => "cfe_internal_disable_cfengine_agents_processes_terminate_process",
      ifvarclass => "disable_$(cprocess)";

}

#
###############################################################################
#

bundle agent enable_cfengine_agents(process)
{
 vars:

  any::

   "cprocess"  string => canonify("$(process)"),
              comment => "Canonify a given process",
               handle => "cfe_internal_enable_cfengine_agents_vars_cprocess";

   "file_check"  string => translatepath("$(cfe_internal_update_policy.inputs_dir)/promises.cf"),
                comment => "Path to a policy file",
                 handle => "cfe_internal_enable_cfengine_agents_vars_file_check";

#

 classes:

  !windows::

   "enable_$(cprocess)" expression => strcmp("$(process)","$(process)"),
                           comment => "Create a class to enable a given process",
                            handle => "cfe_internal_enable_cfengine_agents_classes_enable_process";

   "files_ok"         expression => fileexists("$(file_check)"),
                         comment => "Check for /var/cfengine/inputs/promises.cf",
                          handle => "cfe_internal_enable_cfengine_agents_classes_files_ok";

#

 processes:

  files_ok::

   "$(sys.workdir)/bin/$(process)"
      restart_class => "restart_$(cprocess)",
            comment => "Create a class to restart a process",
             handle => "cfe_internal_enable_cfengine_agents_processes_restart_process",
         ifvarclass => "enable_$(cprocess)";

#

 commands:

  !windows::

   "$(sys.$(cprocess))"
         comment => "Restart a process",
          handle => "cfe_internal_enable_cfengine_agents_commands_restart_process",
      ifvarclass => "restart_$(cprocess)";
}

#
###############################################################################
#

bundle agent maintain_cfe_windows
{
 vars:

  windows::

   "file_check"  string => translatepath("$(cfe_internal_update_policy.inputs_dir)/promises.cf"),
                comment => "Path to a policy file",
                 handle => "cfe_internal_maintain_cfe_windows_vars_file_check";

#

 classes:

  windows::

   "files_ok" expression => fileexists("$(file_check)"),
                 comment => "Check for /var/cfengine/masterfiles/promises.cf",
                  handle => "cfe_internal_maintain_cfe_windows_classes_files_ok";

#

 processes:

  files_ok::

   "cf-serverd"  restart_class => "start_server",
                       comment => "Monitor cf-serverd process",
                        handle => "cfe_internal_maintain_cfe_windows_processes_cf_serverd";

   "cf-monitord" restart_class => "start_monitor",
                       comment => "Monitor cf-monitord process",
                        handle => "cfe_internal_maintain_cfe_windows_processes_cf_monitord";

#

 services:

  files_ok.windows::
 
   "CfengineNovaExec"
      service_policy => "start",
      service_method => u_bootstart,
             comment => "Start the executor windows service now and at boot time",
              handle => "cfe_internal_maintain_cfe_windows_services_windows_executor";

#

 commands:

  start_server::

   "$(sys.cf_serverd)"
       action => u_ifwin_bg,
      comment => "Start cf-serverd process",
       handle => "cfe_internal_maintain_cfe_windows_commands_start_cf_serverd";

  start_monitor|restart_monitor::

   "$(sys.cf_monitord)"
       action => u_ifwin_bg,
      comment => "Start cf-monitord process",
       handle => "cfe_internal_maintain_cfe_windows_commands_start_cf_monitord";
   
}
