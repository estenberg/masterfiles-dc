

# environment common bundles

# environment e206a54e97690cce50cc872dd70ee896
bundle common e206a54e97690cce50cc872dd70ee896
{
  vars:
      "activated" string => "--'activated' value passed as a class function--";
      "env_vars" slist => { "activated", "test", "verbose" };
      "test" string => "";
      "verbose" string => "";
  classes:
      "runenv_e206a54e97690cce50cc872dd70ee896_activated" and => { classmatch("linux") };
      "runenv_e206a54e97690cce50cc872dd70ee896_test" expression => "!any";
      "runenv_e206a54e97690cce50cc872dd70ee896_verbose" expression => "!any";
}

# environment 743d77803fee4a94da7a67d2801cb55e
bundle common 743d77803fee4a94da7a67d2801cb55e
{
  vars:
      "activated" string => "--'activated' value passed as a class function--";
      "env_vars" slist => { "activated", "test", "verbose" };
      "test" string => "";
      "verbose" string => "";
  classes:
      "runenv_743d77803fee4a94da7a67d2801cb55e_activated" and => { classmatch("ipv4_10_202_10|ipv4_10_194") };
      "runenv_743d77803fee4a94da7a67d2801cb55e_test" expression => "!any";
      "runenv_743d77803fee4a94da7a67d2801cb55e_verbose" expression => "!any";
}


# activation data
bundle common cfsketch_g
{
  vars:
      # Files that need to be loaded for the activated sketches and
      # their dependencies.
      "inputs" slist => { "sketches/libraries/dclib/library.cf", "sketches/package_management/packages_installed/main.cf", "sketches/security/file_integrity/main.cf" };
}

bundle agent cfsketch_run
{
  vars:

      # array 'metadata' from definition sketch metadata, activation __Install_packages_001_Packages_installed_installed
      "__Install_packages_001_Packages_installed_installed_metadata[activation][identifier]" string => "Install packages";
      "__Install_packages_001_Packages_installed_installed_metadata[activation][timestamp]" string => "1369859879";
      "__Install_packages_001_Packages_installed_installed_metadata[api][][type]" string => "bundle_options";
      "__Install_packages_001_Packages_installed_installed_metadata[api][metadata][type]" string => "metadata";
      "__Install_packages_001_Packages_installed_installed_metadata[api][pkgs_add][type]" string => "list";
      "__Install_packages_001_Packages_installed_installed_metadata[api][pkgs_delete][type]" string => "list";
      "__Install_packages_001_Packages_installed_installed_metadata[api][runenv][type]" string => "environment";
      "__Install_packages_001_Packages_installed_installed_metadata[authors]" slist => { "Eystein Stenberg <eystein.maloy.stenberg@cfengine.com>" };
      "__Install_packages_001_Packages_installed_installed_metadata[bundle_options][single_use]" string => "1";
      "__Install_packages_001_Packages_installed_installed_metadata[depends]" slist => { "CFEngine::dclib", "CFEngine::stdlib" };
      "__Install_packages_001_Packages_installed_installed_metadata[license]" string => "MIT";
      "__Install_packages_001_Packages_installed_installed_metadata[location]" string => "sketches/package_management/packages_installed";
      "__Install_packages_001_Packages_installed_installed_metadata[manifest]" slist => { "README.md", "main.cf", "params/demo.json", "test.cf", "test.pl" };
      "__Install_packages_001_Packages_installed_installed_metadata[manifest_cf]" slist => { "main.cf", "test.cf" };
      "__Install_packages_001_Packages_installed_installed_metadata[manifest_docs]" slist => { "README.md" };
      "__Install_packages_001_Packages_installed_installed_metadata[manifest_exe]" slist => { "cf_null" };
      "__Install_packages_001_Packages_installed_installed_metadata[manifest_extra]" slist => { "params/demo.json" };
      "__Install_packages_001_Packages_installed_installed_metadata[manifest_test]" slist => { "test.pl" };
      "__Install_packages_001_Packages_installed_installed_metadata[name]" string => "Packages::installed";
      "__Install_packages_001_Packages_installed_installed_metadata[tags]" slist => { "cfdc", "packages", "enterprise_compatible" };
      "__Install_packages_001_Packages_installed_installed_metadata[version]" string => "1.0.0";

      # list 'pkgs_add' from definition 665bc2a476bd8e4f833dc12976aedba2, activation __Install_packages_001_Packages_installed_installed
      "__Install_packages_001_Packages_installed_installed_pkgs_add" slist => { "vim", "nano" };

      # list 'pkgs_delete' from definition 665bc2a476bd8e4f833dc12976aedba2, activation __Install_packages_001_Packages_installed_installed
      "__Install_packages_001_Packages_installed_installed_pkgs_delete" slist => { "telnetd" };

      # array 'metadata' from definition sketch metadata, activation __Nicks_Test_Watching_Temp_002_Security_file_integrity_watch
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[activation][identifier]" string => "Nicks Test Watching Temp";
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[activation][timestamp]" string => "1369856231";
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[api][hash_algorithm][type]" string => "string";
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[api][ifelapsed][type]" string => "string";
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[api][metadata][type]" string => "metadata";
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[api][paths][type]" string => "return";
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[api][runenv][type]" string => "environment";
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[api][watch][type]" string => "list";
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[authors]" slist => { "Eystein Stenberg <eystein@cfengine.com>" };
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[depends]" slist => { "CFEngine::dclib", "CFEngine::stdlib" };
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[license]" string => "MIT";
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[location]" string => "sketches/security/file_integrity";
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[manifest]" slist => { "README.md", "main.cf", "params/pcidss_v2.json" };
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[manifest_cf]" slist => { "main.cf" };
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[manifest_docs]" slist => { "README.md" };
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[manifest_exe]" slist => { "cf_null" };
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[manifest_extra]" slist => { "params/pcidss_v2.json" };
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[manifest_test]" slist => { "cf_null" };
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[name]" string => "Security::file_integrity";
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[tags]" slist => { "cfdc", "pcidss", "pcidss_v2", "pcidss_v2_sec_11_5", "enterprise_compatible" };
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata[version]" string => "1";

      # list 'watch' from definition d23644ea44b33f589d3332ed452feb4c, activation __Nicks_Test_Watching_Temp_002_Security_file_integrity_watch
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_watch" slist => { "/tmp" };

  methods:
    any::
      "cfsketch_g" usebundle => "cfsketch_g";
      "e206a54e97690cce50cc872dd70ee896" usebundle => "e206a54e97690cce50cc872dd70ee896";
      "743d77803fee4a94da7a67d2801cb55e" usebundle => "743d77803fee4a94da7a67d2801cb55e";

    runenv_743d77803fee4a94da7a67d2801cb55e_activated::
      "__Install_packages_001_Packages_installed_installed" usebundle => cfdc_packages:installed("743d77803fee4a94da7a67d2801cb55e", "default:cfsketch_run.__Install_packages_001_Packages_installed_installed_metadata", @(cfsketch_run.__Install_packages_001_Packages_installed_installed_pkgs_add), @(cfsketch_run.__Install_packages_001_Packages_installed_installed_pkgs_delete)), ifvarclass => "(debian)", useresult => "return___Install_packages_001_Packages_installed_installed";
    runenv_e206a54e97690cce50cc872dd70ee896_activated::
      "__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch" usebundle => cfdc_file_integrity:watch("e206a54e97690cce50cc872dd70ee896", "default:cfsketch_run.__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_metadata", @(cfsketch_run.__Nicks_Test_Watching_Temp_002_Security_file_integrity_watch_watch), "sha256", "5"), ifvarclass => "(linux|windows)", useresult => "return___Nicks_Test_Watching_Temp_002_Security_file_integrity_watch";

  reports:
    inform_mode::
      "activation __Install_packages_001_Packages_installed_installed could not run because it requires classes (debian)" ifvarclass => "inform_mode.!((debian))";
      "activation __Nicks_Test_Watching_Temp_002_Security_file_integrity_watch returned paths = $(return___Nicks_Test_Watching_Temp_002_Security_file_integrity_watch[paths])";
      "activation __Nicks_Test_Watching_Temp_002_Security_file_integrity_watch could not run because it requires classes (linux|windows)" ifvarclass => "inform_mode.!((linux|windows))";
}
